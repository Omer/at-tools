#!/usr/bin/env ruby

require "uri"
require "net/http"
require "optparse"
require "pathname"

APP_ROOT = File.join(File.dirname(Pathname.new(__FILE__).realpath),'/..')
LIB_ROOT = APP_ROOT + "/lib"
require LIB_ROOT + "/sup"

# The ask function. Current uses double-enter for submitting.
def ask(question, default=nil, valid = /.*/, multiline=false)
  output = question
  output << " [#{default}]" unless default.nil?
  output << " (Optional)" if valid =~ ""
  output << ": "
  if multiline
    puts output
  else
    print output
  end
  
  matches = false
  answer = default || ""

  while not matches

    if multiline
        while not (input = gets) == "\n"
            answer << input
        end
        answer.chomp!
    else
      answer = gets.chomp
    end

    matches = answer =~ valid
    
    if answer.empty? and default 
      answer = default
      matches = true
    end
   
    unless matches
      puts "The entered input is invalid. Please try again: "
	  if multiline
		  puts output
	  else
		  print output
	  end
    end 
  end 

  $/ = "\n"

  answer

end

# Set up the usage options.

request = Request.new

options = {
  :user => request.username,
  :machine => request.machine,
  :email => request.email,
  :urgent => request.urgent
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: sup [OPTIONS] [TITLE] [MESSAGE]"
  opts.program_name = "sup"
  opts.version = "0.0.1"
  
  opts.on("-h", "--help", "Display this screen.") do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "General"

  opts.on("-u", "--user=USERNAME",
    "The username to use when sending the report. Defaults to the current username.") do |user|
    request.username = user
  end

  opts.on("-m", "--machine=MACHINE", "The machine which you are reporting a problem with.") do |machine|
    request.machine = machine
  end

  opts.separator ""
  opts.separator "Additional"

  opts.on("-e", "--email=EMAIL", "An alternative email address for the support request.") do |email|
    request.email = email
  end

  opts.on("-s", "--serious", "Marks the request as urgently requiring attention.") do
    request.urgent = 1
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts "sup: " + e
  puts optparse.help
  exit 0
end
 
# Get input from the user, with defaults if they are set. 
request.username = ask("Username", request.username, /^s\d+/)
request.machine = ask("Machine Name", request.machine, /.+/)
request.email = request.email || ask("Email", nil, /.*/)
request.urgent = Integer(ask("Urgent?", request.urgent, /^(0|1)$/))

request.subject = ARGV.shift || ask("Subject", nil, /.+/)
request.description = ARGV.shift || ask("Message (Double return to submit.)", nil, /.+/, true)

# Final check:
puts "\nRequest is...\n"
puts "Username: " + request.username
puts "Machine: " + request.machine
puts "Email: " + request.email unless request.email.empty?
puts "[Urgent]" if request.urgent == 1
puts "Subject: " + request.subject
puts "Message: "
puts request.description
print "\nSend request? (Y/N) "
exit 0 if(gets.chomp.upcase == "N") 

puts "\n\nResponse:"

# Fire off the request. 
response = request.submit

# Output the result.
puts response.body
