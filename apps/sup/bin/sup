#!/usr/bin/env ruby

require "optparse"
require "pathname"

APP_ROOT = File.join(File.dirname(Pathname.new(__FILE__).realpath),'/..')
LIB_ROOT = APP_ROOT + "/lib"
require LIB_ROOT + "/sup"

# The ask function. Current uses double-enter for submitting.
def ask(question, default=nil, valid = /.*/, multiline=false, extra=nil)
  output = question.cyanish
  output << " #{extra}" unless extra.nil?
  output << " [#{default.greenish}]" unless default.nil?
  output << " (Optional)" if valid =~ ""
  output << ": "
  if multiline
    puts output
  else
    print output
  end
  
  matches = false
  answer = default || ""

  while not matches

    if multiline
      temp_answer = ""
      while true
        begin
          input = STDIN.sysread(1)
          answer += input
        rescue EOFError
          break
        end
      end
    else
      temp_answer = gets
      answer = temp_answer.chomp! unless temp_answer.nil?
    end

    matches = answer =~ valid

    if answer.empty? and default 
      answer = default
      matches = true
    end
   
    unless matches
      puts "The entered input is invalid. Please try again: ".red
    if multiline
      puts output
    else
      print output
    end
    end 
  end 

  answer

end

# Set up the usage options.

request = Request.new

options = {
  :user => request.username,
  :machine => request.machine,
  :email => request.email,
  :urgent => request.urgent
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: sup [OPTIONS] [TITLE] [MESSAGE]"
  opts.program_name = "sup"
  opts.version = "0.0.1"
  
  opts.on("-h", "--help", "Display this screen.") do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "General"

  opts.on("-u", "--user=USERNAME",
    "The username to use when sending the report. Defaults to the current username.") do |user|
    request.username = user
  end

  opts.on("-m", "--machine=MACHINE", "The machine which you are reporting a problem with.") do |machine|
    request.machine = machine
  end

  opts.separator ""
  opts.separator "Additional"

  opts.on("-e", "--email=EMAIL", "An alternative email address for the support request.") do |email|
    request.email = email
  end

  opts.on("-s", "--serious", "Marks the request as urgently requiring attention.") do
    request.urgent = 1
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts "sup: " + e
  puts optparse.help
  exit 0
end
 
# Get input from the user, with defaults if they are set. 
request.username = ask("Username", request.username, /^s\d+/)
request.machine = ask("Machine Name", request.machine, /.+/)
request.email = request.email || ask("Email", nil, /.*/)
request.urgent = ask("Urgent?", request.urgent.to_s, /^(0|1)$/).to_i

request.subject = ARGV.shift || ask("Subject", nil, /.+/)
request.description = ARGV.shift || ask("Message", nil, /.+/, true, "(Press Enter then Ctrl-D to submit.)")

# Final check:
puts "\nRequest is...\n"
puts "Username: ".cyanish + request.username.purpleish
puts "Machine: ".cyanish + request.machine.purpleish
puts "Email: ".cyanish + request.email.purpleish unless request.email.empty?
puts "[Urgent]".cyanish if request.urgent == 1
puts "Subject: ".cyanish + request.subject.purpleish
puts "Message: ".cyanish
puts request.description.purpleish
exit 0 if (ask "\nSend request?", nil, /^[YN]$/i, false, "(Y/N)").upcase.eql? "N"

begin

  # Fire off the request. 
  response = request.submit!

  unless response.body.include? "Your message has been sent to the Support team."
    puts "\n\nError: Request may have not been accepted.".red
    puts "The following HTML was returned:\n".cyanish
    puts response.body
    puts "\nPlease contact the development team about this issue, including this entire message.".cyanish
    puts "(Issue tracker url: http://github.com/lolsoft/at-tools/issues)".cyanish
    exit
  end

  puts "\n\nRequest received and accepted. You should receive an automated reply from computing support soon."
  puts "Thanks for using sup!"
  puts response.body

rescue RequestException => e

  puts "Request failed. Error message:"
  puts e.message.red
  puts "If you think you should not have encountered this error, please contact the development team, including the error."
  puts "(Issue tracker url: http://github.com/lolsoft/at-tools/issues)"

end
