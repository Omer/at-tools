#!/usr/bin/env ruby

require 'pathname'

T_ROOT = File.join(File.dirname(Pathname.new(__FILE__).realpath),'/../../../lib')

# We require carto in order to keep the files up to date.
require T_ROOT + "/carto.rb"

if ARGV.length != 1
  puts "Usage: findme [MATRIC]"
  exit 1
end

machine_file = '../hosts/machine-list'

# TODO: Use a regexp to parse this and check it for correctness?
matric = ARGV[0]

# If our list of machines is out of date
unless FileTest.exist?(machine_file) and File.mtime(machine_file) > (Time.now - 86400) 

  machine_list = []

  # TODO: Creating the machine list manually by looping from 3 to 8 seems
  # wrong. Should find a better way to do this with the Carto API.
  (3..8).each { |i|

    floor_map = Inventory.find_by_floor("#{i}")

    floor_map.each { |machines| 
      machines.each { |machine| machine_list.push machine }
    }

  }

  File.open(machine_file,'w') { |file|
    machine_list.each { |machine|
      file.write("#{machine}\n")
    }
  }

end

# We need to keep track of the threads to join them later.
threads = []

# A list of all of the machines the user is logged in to.
machines = []


File.open(machine_file,'r').each { |line|

  machine = line.chomp!

  threads << Thread.new { 

    # Do not try and ssh into any machines that need a password, because
    # they will print out a question and break the UI flow. Host key checking
    # is disabled for the same reason.
    users = `ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no #{machine} users 2> /dev/null`

    regexp = Regexp.new(ARGV[0])

    # Note: This may get confused if the output contains a superset
    # of the input matric - should tighten up this check a bit.
    if users =~ regexp
      machines << machine
    end

  }

}

# Wait for all of the threads to finish. Most should already be finished.
threads.each { |thread| thread.join }

unless machines.empty?
  # For each machine, look it up with carto and
  # get the room name and floor. 
  puts "Search complete. User #{matric} was found on the following machines:"
  machines.each { |m|
    details = Inventory.find_by_host m
    puts "#{m} - Floor #{details['floor']}, Room #{details['room']}"
  }
  puts "Bye!"
else
  puts "Search complete. Cannot find user #{matric} on any machine in AT."
  puts "Bye!"
end
